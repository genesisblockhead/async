// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Js_promise = require("rescript/lib/js/js_promise.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function once(cb) {
  var called = {
    contents: false
  };
  return function (x) {
    if (!called.contents) {
      called.contents = true;
      return Curry._1(cb, x);
    }
    
  };
}

function unit(x, cb) {
  setImmediate(cb, {
        TAG: /* Ok */0,
        _0: x
      });
}

function err(message, cb) {
  setImmediate(cb, {
        TAG: /* Error */1,
        _0: Caml_js_exceptions.internalToOCamlException(new Error(message))
      });
}

function asyncify(f, x, cb) {
  var tmp;
  try {
    tmp = {
      TAG: /* Ok */0,
      _0: Curry._1(f, x)
    };
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    tmp = {
      TAG: /* Error */1,
      _0: e
    };
  }
  return Curry._1(cb, tmp);
}

function asyncRef(param) {
  var x = {
    contents: false
  };
  process.nextTick(function (param) {
        x.contents = true;
      });
  return x;
}

function callback(cb, m) {
  var ticked = asyncRef(undefined);
  return Curry._1(m, (function (result) {
                if (ticked.contents) {
                  return Curry._1(cb, result);
                } else {
                  setImmediate(cb, result);
                  return ;
                }
              }));
}

function map(f, m, cb) {
  return callback((function (x) {
                var tmp;
                if (x.TAG === /* Ok */0) {
                  try {
                    var y = Curry._1(f, x._0);
                    tmp = {
                      TAG: /* Ok */0,
                      _0: y
                    };
                  }
                  catch (raw_e){
                    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                    tmp = {
                      TAG: /* Error */1,
                      _0: e
                    };
                  }
                } else {
                  tmp = {
                    TAG: /* Error */1,
                    _0: x._0
                  };
                }
                Curry._1(cb, tmp);
              }), m);
}

function flatMap(f, m, cb) {
  return Curry._1(m, (function (x) {
                if (x.TAG === /* Ok */0) {
                  return Curry._2(f, x._0, cb);
                } else {
                  return Curry._1(cb, {
                              TAG: /* Error */1,
                              _0: x._0
                            });
                }
              }));
}

function rescript(f, cb) {
  return Curry._1(f, (function (e, r) {
                return Curry._1(cb, (e == null) ? ({
                                TAG: /* Ok */0,
                                _0: r
                              }) : ({
                                TAG: /* Error */1,
                                _0: Caml_js_exceptions.internalToOCamlException(e)
                              }));
              }));
}

function delay(n, x, cb) {
  setTimeout(cb, n, {
        TAG: /* Ok */0,
        _0: x
      });
}

function tuple(param, cb) {
  var a = {
    contents: undefined
  };
  var b = {
    contents: undefined
  };
  var cb$1 = once(cb);
  var go = function (param) {
    var match = a.contents;
    var match$1 = b.contents;
    if (match !== undefined) {
      if (match.TAG !== /* Ok */0) {
        return Curry._1(cb$1, {
                    TAG: /* Error */1,
                    _0: match._0
                  });
      }
      if (match$1 === undefined) {
        return ;
      }
      if (match$1.TAG === /* Ok */0) {
        return Curry._1(cb$1, {
                    TAG: /* Ok */0,
                    _0: [
                      match._0,
                      match$1._0
                    ]
                  });
      }
      
    }
    if (match$1 !== undefined && match$1.TAG !== /* Ok */0) {
      return Curry._1(cb$1, {
                  TAG: /* Error */1,
                  _0: match$1._0
                });
    }
    
  };
  Curry._1(param[0], (function (result) {
          var match = a.contents;
          if (match !== undefined) {
            
          } else {
            a.contents = result;
          }
          go(undefined);
        }));
  return Curry._1(param[1], (function (result) {
                var match = b.contents;
                if (match !== undefined) {
                  
                } else {
                  b.contents = result;
                }
                go(undefined);
              }));
}

function tuple3(param) {
  var partial_arg_0 = param[0];
  var partial_arg_1 = param[1];
  var partial_arg = [
    partial_arg_0,
    partial_arg_1
  ];
  var partial_arg_0$1 = function (param) {
    return tuple(partial_arg, param);
  };
  var partial_arg_1$1 = param[2];
  var partial_arg$1 = [
    partial_arg_0$1,
    partial_arg_1$1
  ];
  var partial_arg$2 = function (param) {
    return tuple(partial_arg$1, param);
  };
  return function (param) {
    return map((function (param) {
                  var match = param[0];
                  return [
                          match[0],
                          match[1],
                          param[1]
                        ];
                }), partial_arg$2, param);
  };
}

function tuple4(param) {
  var partial_arg_0 = param[0];
  var partial_arg_1 = param[1];
  var partial_arg = [
    partial_arg_0,
    partial_arg_1
  ];
  var partial_arg_0$1 = param[2];
  var partial_arg_1$1 = param[3];
  var partial_arg$1 = [
    partial_arg_0$1,
    partial_arg_1$1
  ];
  var partial_arg_0$2 = function (param) {
    return tuple(partial_arg, param);
  };
  var partial_arg_1$2 = function (param) {
    return tuple(partial_arg$1, param);
  };
  var partial_arg$2 = [
    partial_arg_0$2,
    partial_arg_1$2
  ];
  var partial_arg$3 = function (param) {
    return tuple(partial_arg$2, param);
  };
  return function (param) {
    return map((function (param) {
                  var match = param[1];
                  var match$1 = param[0];
                  return [
                          match$1[0],
                          match$1[1],
                          match[0],
                          match[1]
                        ];
                }), partial_arg$3, param);
  };
}

function parallel(tasks, cb) {
  if (tasks.length === 0) {
    return Curry._1(cb, {
                TAG: /* Ok */0,
                _0: []
              });
  }
  var cb$1 = once(cb);
  var finished = {
    contents: 0
  };
  var results = Js_array.map((function (param) {
          
        }), tasks);
  Js_array.forEachi((function (m, i) {
          Curry._1(m, once(function (result) {
                    if (result.TAG !== /* Ok */0) {
                      return Curry._1(cb$1, {
                                  TAG: /* Error */1,
                                  _0: result._0
                                });
                    }
                    finished.contents = finished.contents + 1 | 0;
                    Caml_array.set(results, i, result);
                    if (finished.contents === tasks.length) {
                      return Curry._1(cb$1, {
                                  TAG: /* Ok */0,
                                  _0: Js_array.map((function (result) {
                                          if (result !== undefined && result.TAG === /* Ok */0) {
                                            return result._0;
                                          } else {
                                            return Js_exn.raiseError("this is impossible dont worry");
                                          }
                                        }), results)
                                });
                    }
                    
                  }));
        }), tasks);
}

function series(tasks, cb) {
  var length = tasks.length;
  var results = [];
  var helper = function (i, cb) {
    if (i < length) {
      return Curry._1(Caml_array.get(tasks, i), (function (result) {
                    if (result.TAG !== /* Ok */0) {
                      return Curry._1(cb, {
                                  TAG: /* Error */1,
                                  _0: result._0
                                });
                    }
                    Js_array.push(result._0, results);
                    return helper(i + 1 | 0, cb);
                  }));
    } else {
      return Curry._1(cb, {
                  TAG: /* Ok */0,
                  _0: results
                });
    }
  };
  return helper(0, cb);
}

function race(tasks, cb) {
  if (tasks.length === 0) {
    err("no tasks means nobody can win the race", cb);
  }
  var cb$1 = once(cb);
  Js_array.forEach((function (param) {
          return callback(cb$1, param);
        }), tasks);
}

function recover(handler, m, cb) {
  return Curry._1(m, (function (r) {
                if (r.TAG === /* Ok */0) {
                  return Curry._1(cb, {
                              TAG: /* Ok */0,
                              _0: r._0
                            });
                } else {
                  return callback(cb, Curry._1(handler, r._0));
                }
              }));
}

function timeout(t, m, cb) {
  var cb$1 = once(cb);
  var timeout$1 = setTimeout((function (param) {
          err("Timeout", cb$1);
        }), t);
  return Curry._1(m, (function (x) {
                clearTimeout(timeout$1);
                Curry._1(cb$1, x);
              }));
}

var PromiseError = /* @__PURE__ */Caml_exceptions.create("Async.PromiseError");

function fromPromise(p) {
  var p$1 = Js_promise.$$catch((function (e) {
          return Promise.resolve({
                      TAG: /* Error */1,
                      _0: {
                        RE_EXN_ID: PromiseError,
                        _1: e
                      }
                    });
        }), Js_promise.then_((function (x) {
              return Promise.resolve({
                          TAG: /* Ok */0,
                          _0: x
                        });
            }), p));
  return function (cb) {
    Js_promise.then_((function (x) {
            return Promise.resolve((setImmediate(cb, x), undefined));
          }), p$1);
  };
}

exports.err = err;
exports.unit = unit;
exports.rescript = rescript;
exports.asyncify = asyncify;
exports.map = map;
exports.flatMap = flatMap;
exports.tuple = tuple;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.recover = recover;
exports.delay = delay;
exports.race = race;
exports.timeout = timeout;
exports.fromPromise = fromPromise;
exports.parallel = parallel;
exports.series = series;
exports.callback = callback;
/* No side effect */
